{#
Example:

{{
    server(
        ['www.example.com', 'www.example.org'],
        [
            {
                'upstream': 'varnish',
            },
            {
                'path': ['/client/', '/admin/'],
                'upstream': 'app',
                'oauth2proxy': {'config': none},
                'client_max_body_size': '2G',
            },
            {
                'path': '/old/',
                'upstream': 'oldapp',
                'custom': '
                    proxy_set_header Host www.example.com;
                    proxy_redirect https://www.example.com/ https://$host/;
                    proxy_ssl_name www.example.com;
                    proxy_ssl_server_name on;
                    proxy_ssl_verify on;
                ',
            },
            {
                'path': '= /foo/',
                'custom': 'return 301 /bar/;',
                'custom_only': true,
            } if x == y else none,
        ]|reject('none')|list,
        oauth2proxy={
            'config': 'main',
            'allow': ['10.0.0.0/8'],
        },
        https_params={
            'certificate': dehydrated|cert_fullchain(domain),
            'certificate_key': dehydrated|cert_privkey(domain),
            'trusted_certificate': dehydrated|cert_chain(domain),
        }
    )
}}
#}

{% from (role_path + "/../nginx/templates/macros/https_params.conf")|relpath(playbook_dir) import https_params as https_params_macro with context %}
{% import (role_path + "/../nginx/templates/macros/oauth2proxy.conf")|relpath(playbook_dir) as oauth2proxy_macros with context %}

{% macro proxy_location(upstream, path='/', scheme='http', custom='', custom_only=false, host='$host', client_max_body_size='100M', oauth2proxy={}) %}
    {% set path = [path] if path is string else path|reject('none')|list %}
    {% for pathitem in path  %}
        location {{ pathitem }} {
            {% if not custom_only %}
                {% if oauth2proxy %}
                    {{ oauth2proxy_macros.location(**oauth2proxy) }}
                {% endif %}
                proxy_pass {{ scheme }}://{{ upstream }};
                proxy_http_version 1.1;
                proxy_set_header Connection "";
                proxy_set_header Host {{ host }};
                proxy_set_header X-Request-ID $ensure_request_id;
                proxy_set_header X-Real-IP $remote_addr;
                {% for header in nginx.proxy.hide_headers %}
                proxy_hide_header {{ header }};
                {% endfor %}
                client_max_body_size {{ client_max_body_size }};
            {% endif %}
            {{ custom }}
        }
    {% endfor %}
{% endmacro %}

{% macro server(domain, location, listen=['0.0.0.0:443 ssl http2', '[::]:443 ssl http2'], https_params={}, oauth2proxy={'config': none}) %}
    {% set domain = [domain] if domain is string else domain|reject('none')|list %}
    {% if domain %}
        server {
            {% for listener in listen %}
                listen {{ listener }};
            {% endfor %}
            server_name {{ domain|join(' ') }};

            add_header X-Request-ID $ensure_request_id always;

            include {{ nginx.prefix.config }}/include/letsencrypt.conf;

            {{ oauth2proxy_macros.server(oauth2proxy.config) }}

            {% for locationitem in location %}
                {{ proxy_location(**({'oauth2proxy': oauth2proxy}|combine(locationitem, recursive=true))) }}
            {% endfor %}

            {{ https_params_macro(**https_params) }}
        }
    {% endif %}
{% endmacro %}
